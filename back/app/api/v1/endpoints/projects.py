"""
Projects endpoints
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime
import random
import string
from pydantic import BaseModel, field_validator

from app.core.database import get_db
from app.models.user import User
from app.models.project import Project, ProjectMember, ProjectDisciplineDocumentType
from app.models.discipline import Discipline, DocumentType
from app.services.auth import get_current_active_user

router = APIRouter()

class ProjectCreate(BaseModel):
    name: str
    description: str = None
    project_code: str | None = None
    status: str = "planning"
    start_date: str = None
    end_date: str = None
    budget: float = None
    manager_id: int = None
    selected_disciplines: List[int] = []  # –°–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
    discipline_document_types: dict = {}  # {discipline_id: [document_type_ids] or [{documentTypeId, drs}]}
    selected_revision_descriptions: List[int] = []  # –°–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ–≤–∏–∑–∏–π
    selected_revision_steps: List[int] = []  # –°–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ —Ä–µ–≤–∏–∑–∏–π
    workflow_preset_id: int = None  # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ workflow –ø—Ä–µ—Å–µ—Ç–∞

class ProjectUpdate(BaseModel):
    name: str = None
    description: str = None
    status: str = None
    start_date: str = None
    end_date: str = None
    budget: float = None
    manager_id: int = None
    selected_disciplines: List[int] | None = None
    discipline_document_types: dict | None = None
    selected_revision_descriptions: List[int] | None = None
    selected_revision_steps: List[int] | None = None
    workflow_preset_id: int | None = None

@router.get("/check-code/{project_code}")
async def check_project_code(
    project_code: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    existing_project = db.query(Project).filter(
        Project.project_code == project_code, 
        Project.is_deleted == 0
    ).first()
    
    if existing_project:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞
        owner = db.query(User).filter(User.id == existing_project.created_by).first()
        owner_name = owner.full_name if owner else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        result = {
            "exists": True,
            "message": "project_exists",
            "owner": owner_name,
            "project_name": existing_project.name
        }
        return result
    
    # –ï—Å–ª–∏ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ
    deleted_project = db.query(Project).filter(
        Project.project_code == project_code, 
        Project.is_deleted == 1
    ).first()
    
    if deleted_project:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        owner = db.query(User).filter(User.id == deleted_project.created_by).first()
        owner_name = owner.full_name if owner else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        result = {
            "exists": True,
            "message": "project_deleted",
            "owner": owner_name,
            "project_name": deleted_project.name,
            "is_deleted": True
        }
        return result
    
    # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç –≤–æ–æ–±—â–µ
    result = {
        "exists": False,
        "message": ""
    }
    return result

@router.get("/", response_model=List[dict])
async def get_projects(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
    if current_user.role == 'superadmin':
        projects_query = db.query(Project).filter(Project.is_deleted == 0).offset(skip).limit(limit)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        projects_query = db.query(Project).join(ProjectMember).filter(
            ProjectMember.user_id == current_user.id,
            Project.is_deleted == 0
        ).offset(skip).limit(limit)
    
    projects = projects_query.all()
    return [
        {
            "id": project.id,
            "name": project.name,
            "description": project.description,
            "project_code": project.project_code,
            "status": project.status,
            "start_date": project.start_date.isoformat() if project.start_date else None,
            "end_date": project.end_date.isoformat() if project.end_date else None,
            "budget": project.budget,
            "manager_id": project.manager_id,
            "owner_id": project.created_by,
            "owner_name": (db.query(User).filter(User.id == project.created_by).first().full_name if project.created_by else None),
            "user_role": 'superadmin' if current_user.role == 'superadmin' else (db.query(ProjectMember).filter(ProjectMember.project_id == project.id, ProjectMember.user_id == current_user.id).first().role if db.query(ProjectMember).filter(ProjectMember.project_id == project.id, ProjectMember.user_id == current_user.id).first() else None),  # –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
            "created_at": project.created_at.isoformat() if project.created_at else None,
            "updated_at": project.updated_at.isoformat() if project.updated_at else None
        }
        for project in projects
    ]

@router.post("/", response_model=dict)
async def create_project(
    project_data: ProjectCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º (—Å—Ä–µ–¥–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
    existing_project = db.query(Project).filter(Project.name == project_data.name, Project.is_deleted == 0).first()
    if existing_project:
        raise HTTPException(status_code=400, detail="–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º project_code, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    def _generate_project_code() -> str:
        base = datetime.utcnow().strftime("%Y%m%d")
        while True:
            suffix = ''.join(random.choices(string.digits, k=4))
            code = f"PRJ-{base}-{suffix}"
            if not db.query(Project).filter(Project.project_code == code, Project.is_deleted == 0).first():
                return code

    print(f"üîç DEBUG: Creating project with workflow_preset_id: {project_data.workflow_preset_id}")
    
    db_project = Project(
        name=project_data.name,
        description=project_data.description,
        project_code=project_data.project_code or _generate_project_code(),
        status=project_data.status,
        start_date=project_data.start_date,
        end_date=project_data.end_date,
        budget=project_data.budget,
        manager_id=project_data.manager_id or current_user.id,
        created_by=current_user.id,
        workflow_preset_id=project_data.workflow_preset_id
    )
    
    db.add(db_project)
    db.commit()
    db.refresh(db_project)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ä–æ–ª—å—é "admin"
    project_member = ProjectMember(
        project_id=db_project.id,
        user_id=current_user.id,
        role="admin"
    )
    db.add(project_member)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    for discipline_id, document_type_data in project_data.discipline_document_types.items():
        for item in document_type_data:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
            if isinstance(item, dict):
                document_type_id = item.get('documentTypeId')
                drs = item.get('drs')
            else:
                document_type_id = item
                drs = None
            
                
            project_discipline_document_type = ProjectDisciplineDocumentType(
                project_id=db_project.id,
                discipline_id=discipline_id,
                document_type_id=document_type_id,
                drs=drs
            )
            db.add(project_discipline_document_type)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–≤–∏–∑–∏–π
    from app.models.project import ProjectRevisionDescription
    for revision_description_id in project_data.selected_revision_descriptions:
        project_revision_description = ProjectRevisionDescription(
            project_id=db_project.id,
            revision_description_id=revision_description_id
        )
        db.add(project_revision_description)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏ —Ä–µ–≤–∏–∑–∏–π
    from app.models.project import ProjectRevisionStep
    for revision_step_id in project_data.selected_revision_steps:
        project_revision_step = ProjectRevisionStep(
            project_id=db_project.id,
            revision_step_id=revision_step_id
        )
        db.add(project_revision_step)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if project_data.workflow_preset_id:
        from app.models.project import WorkflowPreset
        
        preset = db.query(WorkflowPreset).filter(
            WorkflowPreset.id == project_data.workflow_preset_id,
            (WorkflowPreset.is_global == True) | (WorkflowPreset.created_by == current_user.id)
        ).first()
        
        if not preset:
            raise HTTPException(status_code=400, detail="–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç workflow –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    db.commit()
    
    return {
        "id": db_project.id,
        "name": db_project.name,
        "description": db_project.description,
        "project_code": db_project.project_code,
        "status": db_project.status,
        "start_date": db_project.start_date.isoformat() if db_project.start_date else None,
        "end_date": db_project.end_date.isoformat() if db_project.end_date else None,
        "budget": db_project.budget,
        "manager_id": db_project.manager_id,
        "owner_id": db_project.created_by,
        "owner_name": (db.query(User).filter(User.id == db_project.created_by).first().full_name if db_project.created_by else None),
        "created_at": db_project.created_at.isoformat() if db_project.created_at else None
    }

@router.get("/{project_id}", response_model=dict)
async def get_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "id": project.id,
        "name": project.name,
        "description": project.description,
        "project_code": project.project_code,
        "status": project.status,
        "start_date": project.start_date.isoformat() if project.start_date else None,
        "end_date": project.end_date.isoformat() if project.end_date else None,
        "budget": project.budget,
        "manager_id": project.manager_id,
        "owner_id": project.created_by,
        "owner_name": (db.query(User).filter(User.id == project.created_by).first().full_name if project.created_by else None),
        "created_at": project.created_at.isoformat() if project.created_at else None,
        "updated_at": project.updated_at.isoformat() if project.updated_at else None
    }

@router.put("/{project_id}", response_model=dict)
async def update_project(
    project_id: int,
    project_data: ProjectUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω/—Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    check_project_access(project, current_user, db, require_creator_or_admin=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
    for field in ["name", "description", "status", "start_date", "end_date", "budget", "manager_id"]:
        value = getattr(project_data, field)
        if value is not None:
            setattr(project, field, value)

    db.add(project)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Ç–∏–ø—ã, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏
    # –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ project_discipline_document_types
    # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω

    if project_data.discipline_document_types is not None:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        db.query(ProjectDisciplineDocumentType).filter(ProjectDisciplineDocumentType.project_id == project_id).delete()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for discipline_id, document_type_data in project_data.discipline_document_types.items():
            for item in document_type_data:
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
                if isinstance(item, dict):
                    document_type_id = item.get('documentTypeId')
                    drs = item.get('drs')
                else:
                    document_type_id = item
                    drs = None
                
                    
                db.add(ProjectDisciplineDocumentType(
                    project_id=project_id,
                    discipline_id=int(discipline_id),
                    document_type_id=int(document_type_id),
                    drs=drs
                ))

    # –û–±–Ω–æ–≤–ª—è–µ–º revision descriptions, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏
    if project_data.selected_revision_descriptions is not None:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        from app.models.project import ProjectRevisionDescription
        db.query(ProjectRevisionDescription).filter(ProjectRevisionDescription.project_id == project_id).delete()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for revision_description_id in project_data.selected_revision_descriptions:
            db.add(ProjectRevisionDescription(
                project_id=project_id,
                revision_description_id=revision_description_id
            ))

    # –û–±–Ω–æ–≤–ª—è–µ–º revision steps, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏
    if project_data.selected_revision_steps is not None:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        from app.models.project import ProjectRevisionStep
        db.query(ProjectRevisionStep).filter(ProjectRevisionStep.project_id == project_id).delete()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for revision_step_id in project_data.selected_revision_steps:
            db.add(ProjectRevisionStep(
                project_id=project_id,
                revision_step_id=revision_step_id
            ))

    # –û–±–Ω–æ–≤–ª—è–µ–º workflow preset, –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª
    if project_data.workflow_preset_id is not None:
        project.workflow_preset_id = project_data.workflow_preset_id

    db.commit()
    db.refresh(project)

    return {
        "id": project.id,
        "name": project.name,
        "description": project.description,
        "project_code": project.project_code,
        "status": project.status,
        "start_date": project.start_date.isoformat() if project.start_date else None,
        "end_date": project.end_date.isoformat() if project.end_date else None,
        "budget": project.budget,
        "manager_id": project.manager_id,
        "owner_id": project.created_by,
        "owner_name": (db.query(User).filter(User.id == project.created_by).first().full_name if project.created_by else None),
        "created_at": project.created_at.isoformat() if project.created_at else None,
        "updated_at": project.updated_at.isoformat() if project.updated_at else None
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

def check_project_access(project: Project, current_user: User, db: Session, require_creator_or_admin: bool = False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    if require_creator_or_admin:
        # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: superadmin –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é "admin" –≤ –ø—Ä–æ–µ–∫—Ç–µ
        if current_user.role == 'superadmin':
            return  # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∞
        admin_member = db.query(ProjectMember).filter(
            ProjectMember.project_id == project.id,
            ProjectMember.user_id == current_user.id,
            ProjectMember.role == 'admin'
        ).first()
        
        if not admin_member:
            raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
    else:
        # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞
        current_member = db.query(ProjectMember).filter(
            ProjectMember.project_id == project.id,
            ProjectMember.user_id == current_user.id
        ).first()
        
        if not current_member:
            raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É")

class ProjectMemberCreate(BaseModel):
    user_id: int
    role: str = "viewer"  # Legacy field, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é viewer
    project_role_id: Optional[int] = None  # –ù–æ–≤–∞—è –ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å
    
    @field_validator('role')
    @classmethod
    def validate_role(cls, v):
        # –£–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º project_role_id
        return v

@router.post("/{project_id}/members/", response_model=dict)
async def add_project_member(
    project_id: int,
    member_data: ProjectMemberCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    check_project_access(project, current_user, db, require_creator_or_admin=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    existing_member = db.query(ProjectMember).filter(
        ProjectMember.project_id == project_id,
        ProjectMember.user_id == member_data.user_id
    ).first()
    
    if existing_member:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    project_member = ProjectMember(
        project_id=project_id,
        user_id=member_data.user_id,
        role=member_data.role,  # Legacy field
        project_role_id=member_data.project_role_id
    )
    
    db.add(project_member)
    db.commit()
    db.refresh(project_member)
    
    return {
        "id": project_member.id,
        "project_id": project_member.project_id,
        "user_id": project_member.user_id,
        "role": project_member.role,
        "joined_at": project_member.joined_at.isoformat() if project_member.joined_at else None
    }

@router.get("/{project_id}/members/", response_model=List[dict])
async def get_project_members(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    check_project_access(project, current_user, db, require_creator_or_admin=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    members = db.query(ProjectMember).filter(ProjectMember.project_id == project_id).all()
    
    return [
        {
            "id": member.id,
            "project_id": member.project_id,
            "user_id": member.user_id,
            "role": member.role,
            "joined_at": member.joined_at.isoformat() if member.joined_at else None
        }
        for member in members
    ]

@router.put("/{project_id}/members/{user_id}", response_model=dict)
async def update_project_member_role(
    project_id: int,
    user_id: int,
    member_data: ProjectMemberCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–æ–ª–∏
    check_project_access(project, current_user, db, require_creator_or_admin=True)
    
    # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    member_to_update = db.query(ProjectMember).filter(
        ProjectMember.project_id == project_id,
        ProjectMember.user_id == user_id
    ).first()
    
    if not member_to_update:
        raise HTTPException(status_code=404, detail="–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–Ω–∏–∂–∞—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–µ–∫—Ç–∞
    if member_to_update.user_id == project.created_by and member_data.role != 'admin':
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤
    if member_to_update.role == 'admin' and member_data.role != 'admin':
        admin_count = db.query(ProjectMember).filter(
            ProjectMember.project_id == project_id,
            ProjectMember.role == 'admin'
        ).count()
        if admin_count <= 1:
            raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    member_to_update.role = member_data.role
    db.commit()
    db.refresh(member_to_update)
    
    return {
        "id": member_to_update.id,
        "project_id": member_to_update.project_id,
        "user_id": member_to_update.user_id,
        "role": member_to_update.role,
        "joined_at": member_to_update.joined_at.isoformat() if member_to_update.joined_at else None
    }

@router.delete("/{project_id}/members/{user_id}")
async def remove_project_member(
    project_id: int,
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    check_project_access(project, current_user, db, require_creator_or_admin=True)
    
    # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    member_to_remove = db.query(ProjectMember).filter(
        ProjectMember.project_id == project_id,
        ProjectMember.user_id == user_id
    ).first()
    
    if not member_to_remove:
        raise HTTPException(status_code=404, detail="–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–±—è
    if user_id == current_user.id:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")

    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if member_to_remove.user_id == project.created_by:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if member_to_remove.role == 'admin':
        admin_count = db.query(ProjectMember).filter(
            ProjectMember.project_id == project_id,
            ProjectMember.role == 'admin'
        ).count()
        if admin_count <= 1:
            raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    db.delete(member_to_remove)
    db.commit()
    
    return {"message": "–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"}


@router.delete("/{project_id}")
async def delete_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Soft delete –ø—Ä–æ–µ–∫—Ç–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç is_deleted = 1)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–µ–Ω
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç
    if current_user.role != 'superadmin' and project.created_by != current_user.id:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_deleted = 1
    project.is_deleted = 1
    db.commit()
    
    return {"message": "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω"}


@router.get("/{project_id}/disciplines", response_model=List[dict])
async def get_project_disciplines(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ project_discipline_document_types
    project_discipline_document_types = db.query(ProjectDisciplineDocumentType).filter(
        ProjectDisciplineDocumentType.project_id == project_id
    ).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    discipline_ids = list(set([pddt.discipline_id for pddt in project_discipline_document_types]))
    
    disciplines = []
    for discipline_id in discipline_ids:
        discipline = db.query(Discipline).filter(Discipline.id == discipline_id).first()
        if discipline:
            disciplines.append({
                "id": discipline.id,
                "code": discipline.code,
                "name": discipline.name,
                "description": discipline.description
            })
    
    return disciplines


@router.get("/{project_id}/document-types/{discipline_id}", response_model=List[dict])
async def get_project_document_types(
    project_id: int,
    discipline_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    project_discipline_document_types = db.query(ProjectDisciplineDocumentType).filter(
        ProjectDisciplineDocumentType.project_id == project_id,
        ProjectDisciplineDocumentType.discipline_id == discipline_id
    ).all()
    
    document_types = []
    for pddt in project_discipline_document_types:
        doc_type = db.query(DocumentType).filter(DocumentType.id == pddt.document_type_id).first()
        if doc_type:
            document_types.append({
                "id": doc_type.id,
                "code": doc_type.code,
                "name": doc_type.name,
                "description": doc_type.description
            })
    
    return document_types


@router.get("/{project_id}/document-types", response_model=dict)
async def get_all_project_document_types(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞-—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    project_discipline_document_types = db.query(ProjectDisciplineDocumentType).filter(
        ProjectDisciplineDocumentType.project_id == project_id
    ).all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º
    result = {}
    for pddt in project_discipline_document_types:
        doc_type = db.query(DocumentType).filter(DocumentType.id == pddt.document_type_id).first()
        if doc_type:
            discipline_id = pddt.discipline_id
            if discipline_id not in result:
                result[discipline_id] = []
            
            
            result[discipline_id].append({
                "id": doc_type.id,
                "code": doc_type.code,
                "name": doc_type.name,
                "description": doc_type.description,
                "drs": pddt.drs
            })
    
    return result


@router.get("/{project_id}/revision-descriptions", response_model=List[dict])
async def get_project_revision_descriptions(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ–≤–∏–∑–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–≤–∏–∑–∏–π –ø—Ä–æ–µ–∫—Ç–∞
    from app.models.project import ProjectRevisionDescription
    from app.models.references import RevisionDescription
    
    project_revision_descriptions = db.query(ProjectRevisionDescription).filter(
        ProjectRevisionDescription.project_id == project_id
    ).all()
    
    revision_descriptions = []
    for prd in project_revision_descriptions:
        rev_desc = db.query(RevisionDescription).filter(RevisionDescription.id == prd.revision_description_id).first()
        if rev_desc:
            revision_descriptions.append({
                "id": rev_desc.id,
                "code": rev_desc.code,
                "description": rev_desc.description,
                "description_native": rev_desc.description_native,
                "phase": rev_desc.phase
            })
    
    return revision_descriptions


@router.get("/{project_id}/revision-steps", response_model=List[dict])
async def get_project_revision_steps(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–≥–æ–≤ —Ä–µ–≤–∏–∑–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏ —Ä–µ–≤–∏–∑–∏–π –ø—Ä–æ–µ–∫—Ç–∞
    from app.models.project import ProjectRevisionStep
    from app.models.references import RevisionStep
    
    project_revision_steps = db.query(ProjectRevisionStep).filter(
        ProjectRevisionStep.project_id == project_id
    ).all()
    
    revision_steps = []
    for prs in project_revision_steps:
        rev_step = db.query(RevisionStep).filter(RevisionStep.id == prs.revision_step_id).first()
        if rev_step:
            revision_steps.append({
                "id": rev_step.id,
                "code": rev_step.code,
                "description": rev_step.description,
                "description_native": rev_step.description_native
            })
    
    return revision_steps


# Workflow API endpoints - –£–î–ê–õ–ï–ù–´
# –¢–µ–ø–µ—Ä—å workflow —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç—ã (workflow_preset_id –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö)
# –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ WorkflowPresetSequence –∏ WorkflowPresetRule


@router.get("/{project_id}/revision-descriptions", response_model=List[dict])
async def get_project_revision_descriptions(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    from app.models.project import ProjectRevisionDescription
    from app.models.references import RevisionDescription
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    project_revisions = db.query(ProjectRevisionDescription).filter(
        ProjectRevisionDescription.project_id == project_id
    ).all()
    
    revision_descriptions = []
    for prd in project_revisions:
        revision_desc = db.query(RevisionDescription).filter(
            RevisionDescription.id == prd.revision_description_id
        ).first()
        if revision_desc:
            revision_descriptions.append({
                "id": revision_desc.id,
                "code": revision_desc.code,
                "description": revision_desc.description,
                "description_native": revision_desc.description_native,
                "is_active": revision_desc.is_active
            })
    
    return revision_descriptions


@router.get("/{project_id}/revision-steps", response_model=List[dict])
async def get_project_revision_steps(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    from app.models.project import ProjectRevisionStep
    from app.models.references import RevisionStep
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    project_steps = db.query(ProjectRevisionStep).filter(
        ProjectRevisionStep.project_id == project_id
    ).all()
    
    revision_steps = []
    for prs in project_steps:
        revision_step = db.query(RevisionStep).filter(
            RevisionStep.id == prs.revision_step_id
        ).first()
        if revision_step:
            revision_steps.append({
                "id": revision_step.id,
                "code": revision_step.code,
                "description": revision_step.description,
                "description_native": revision_step.description_native,
                "description_long": revision_step.description_long,
                "is_active": revision_step.is_active
            })
    
    return revision_steps


@router.get("/{project_id}/workflow-preset", response_model=dict)
async def get_project_workflow_preset(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ workflow –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(Project.id == project_id, Project.is_deleted == 0).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    check_project_access(project, current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç workflow –ø—Ä–æ–µ–∫—Ç–∞
    if project.workflow_preset_id:
        from app.models.project import WorkflowPreset
        workflow_preset = db.query(WorkflowPreset).filter(
            WorkflowPreset.id == project.workflow_preset_id
        ).first()
        
        if workflow_preset:
            return {
                "id": workflow_preset.id,
                "name": workflow_preset.name,
                "description": workflow_preset.description,
                "is_global": workflow_preset.is_global
            }
    
    return {"id": None, "name": None, "description": None}